{
	"$ref": "#/definitions/IRcloneOptions",
	"$schema": "http://json-schema.org/draft-07/schema#",
	"definitions": {
		"IRcloneOptions": {
			"additionalProperties": false,
			"properties": {
				"dlna": {
					"additionalProperties": false,
					"description": "DLNA serving options.",
					"properties": {
						"FriendlyName": {
							"description": "choose the friendly server name,\nwhich is by default \"rclone (hostname)",
							"type": "string"
						},
						"ListenAddr": {
							"description": "specify which IP address and port the server should listen on.\neg `1.2.3.4:8000` or `:8080` to listen to all IPs.",
							"type": "string"
						},
						"LogTrace": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "enable additional debug logging of all UPNP traffic."
						}
					},
					"type": "object"
				},
				"filter": {
					"additionalProperties": false,
					"description": "configures the filter",
					"properties": {
						"DeleteExcluded": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "Delete files on dest excluded from sync"
						},
						"ExcludeFile": {
							"description": "Exclude directories if filename is present",
							"type": "string"
						},
						"ExcludeFrom": {
							"anyOf": [
								{
									"type": "null"
								},
								{
									"items": {
										"type": "string"
									},
									"type": "array"
								}
							],
							"description": "Read exclude patterns from file (use - to read from stdin)"
						},
						"ExcludeRule": {
							"anyOf": [
								{
									"type": "null"
								},
								{
									"items": {
										"type": "string"
									},
									"type": "array"
								}
							],
							"description": "Exclude files matching pattern"
						},
						"FilesFrom": {
							"anyOf": [
								{
									"type": "null"
								},
								{
									"items": {
										"type": "string"
									},
									"type": "array"
								}
							],
							"description": "Read list of source-file names from file (use - to read from stdin)"
						},
						"FilesFromRaw": {
							"anyOf": [
								{
									"type": "null"
								},
								{
									"items": {
										"type": "string"
									},
									"type": "array"
								}
							],
							"description": "Read list of source-file names from file without any processing of lines (use - to read from stdin)"
						},
						"FilterFrom": {
							"anyOf": [
								{
									"type": "null"
								},
								{
									"items": {
										"type": "string"
									},
									"type": "array"
								}
							],
							"description": "Read filtering patterns from a file (use - to read from stdin)"
						},
						"FilterRule": {
							"anyOf": [
								{
									"type": "null"
								},
								{
									"items": {
										"type": "string"
									},
									"type": "array"
								}
							],
							"description": "Add a file-filtering rule"
						},
						"IgnoreCase": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "Ignore case in filters (case insensitive)"
						},
						"IncludeFrom": {
							"anyOf": [
								{
									"type": "null"
								},
								{
									"items": {
										"type": "string"
									},
									"type": "array"
								}
							],
							"description": "Read include patterns from file (use - to read from stdin)"
						},
						"IncludeRule": {
							"anyOf": [
								{
									"type": "null"
								},
								{
									"items": {
										"type": "string"
									},
									"type": "array"
								}
							],
							"description": "Include files matching pattern"
						},
						"MaxAge": {
							"description": "Only transfer files younger than this in s or suffix ms|s|m|h|d|w|M|y",
							"type": "number"
						},
						"MaxSize": {
							"anyOf": [
								{
									"enum": [-1],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "Only transfer files smaller than this in k or suffix b|k|M|G"
						},
						"MinAge": {
							"description": "Only transfer files older than this in s or suffix ms|s|m|h|d|w|M|y",
							"type": "number"
						},
						"MinSize": {
							"anyOf": [
								{
									"enum": [-1],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "Only transfer files bigger than this in k or suffix b|k|M|G"
						}
					},
					"type": "object"
				},
				"ftp": {
					"additionalProperties": false,
					"description": "options for the ftp Server",
					"properties": {
						"BasicPass": {
							"description": "Password for BasicUser authentication.\n(empty value allow every password)",
							"type": "string"
						},
						"BasicUser": {
							"description": "User name for authentication.\nsingle username for basic auth if not using Htpasswd",
							"type": "string"
						},
						"ListenAddr": {
							"description": "IPaddress:Port or :Port to bind server to.",
							"type": "string"
						},
						"PassivePorts": {
							"description": "Passive port range to use.",
							"type": "string"
						},
						"PublicIP": {
							"description": "Public IP address to advertise for passive connections.",
							"type": "string"
						}
					},
					"type": "object"
				},
				"http": {
					"additionalProperties": false,
					"description": "options for the http Server",
					"properties": {
						"BaseURL": {
							"description": "prefix to strip from URLs\n--baseurl controls the URL prefix that rclone serves from.\nBy default rclone will serve from the root.\nIf you used --baseurl \"/rclone\" then rclone would serve from a URL\nstarting with \"/rclone/\".\nThis is useful if you wish to proxy rclone serve.\nRclone automatically inserts leading and trailing \"/\" on --baseurl,\nso --baseurl \"rclone\", --baseurl \"/rclone\" and --baseurl \"/rclone/\"\nare all treated identically.",
							"type": "string"
						},
						"BasicPass": {
							"description": "password for BasicUser",
							"type": "string"
						},
						"BasicUser": {
							"description": "single username for basic auth if not using Htpasswd",
							"type": "string"
						},
						"ClientCA": {
							"description": "Client certificate authority to verify clients with",
							"type": "string"
						},
						"HtPasswd": {
							"description": "htpasswd file - if not provided no authentication is done\nThis is in standard apache format and supports MD5, SHA1 and BCrypt for basic\nauthentication.  Bcrypt is recommended.\nTo create an htpasswd file:\n\n    touch htpasswd\n    htpasswd -B htpasswd user\n    htpasswd -B htpasswd anotherUser\n\nThe password file can be updated while rclone is running.",
							"type": "string"
						},
						"ListenAddr": {
							"description": "Port to listen on\nUse --addr to specify which IP address and port\nthe server should listen on,\neg --addr 1.2.3.4:8000 or --addr :8080 to listen to all IPs.\nBy default it only listens on localhost.\nYou can use port :0 to let the OS choose an available port.\n\nIf you set --addr to listen on a public or LAN accessible IP address\nthen using Authentication is advised - see the next section for info.",
							"type": "string"
						},
						"MaxHeaderBytes": {
							"anyOf": [
								{
									"enum": [4096],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "Maximum size of request header\n--max-header-bytes controls the maximum number of bytes the server will\naccept in the HTTP header."
						},
						"Realm": {
							"description": "realm for authentication",
							"type": "string"
						},
						"ServerReadTimeout": {
							"anyOf": [
								{
									"enum": [3600000000000],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "Timeout for server reading data\nNote that this is the total time for a transfer."
						},
						"ServerWriteTimeout": {
							"anyOf": [
								{
									"enum": [3600000000000],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "Timeout for server writing data\nNote that this is the total time for a transfer."
						},
						"SslCert": {
							"description": "SSL PEM key (concatenation of certificate and CA certificate)",
							"type": "string"
						},
						"SslKey": {
							"description": "SSL PEM Private key",
							"type": "string"
						},
						"Template": {
							"description": "User specified template\n--template allows a user to specify a custom markup template for http\nand webdav serve functions.  The server exports the following markup\nto be used within the template to server pages:\n\n| Parameter   | Description |\n| :---------- | :---------- |\n| .Name       | The full path of a file/directory. |\n| .Title      | Directory listing of .Name |\n| .Sort       | The current sort used.  This is changeable via ?sort= parameter |\n|             | Sort Options: namedirfist,name,size,time (default namedirfirst) |\n| .Order      | The current ordering used.  This is changeable via ?order= parameter |\n|             | Order Options: asc,desc (default asc) |\n| .Query      | Currently unused. |\n| .Breadcrumb | Allows for creating a relative navigation |\n|-- .Link     | The relative to the root link of the Text. |\n|-- .Text     | The Name of the directory. |\n| .Entries    | Information about a specific file/directory. |\n|-- .URL      | The 'url' of an entry.  |\n|-- .Leaf     | Currently same as 'URL' but intended to be 'just' the name. |\n|-- .IsDir    | Boolean for if an entry is a directory or not. |\n|-- .Size     | Size in Bytes of the entry. |\n|-- .ModTime  | The UTC timestamp of an entry. |",
							"type": "string"
						}
					},
					"type": "object"
				},
				"log": {
					"additionalProperties": false,
					"description": "options for the logger",
					"properties": {
						"File": {
							"description": "Log everything to this file",
							"type": "string"
						},
						"Format": {
							"description": "Comma separated list of log format options",
							"type": "string"
						},
						"SyslogFacility": {
							"description": "Facility for syslog, eg KERN,USER,...",
							"type": "string"
						},
						"UseSyslog": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "Use Syslog for logging"
						}
					},
					"type": "object"
				},
				"main": {
					"additionalProperties": false,
					"description": "filesystem config options",
					"properties": {
						"AskPassword": {
							"anyOf": [
								{
									"enum": [true],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "Allow prompt for password for encrypted configuration."
						},
						"AutoConfirm": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "If enabled, do not request console confirmation."
						},
						"BackupDir": {
							"description": "Make backups into hierarchy based in DIR.",
							"type": "string"
						},
						"BindAddr": {
							"description": "Local address to bind to for outgoing connections, IPv4, IPv6 or name.",
							"type": "string"
						},
						"BufferSize": {
							"anyOf": [
								{
									"enum": [16777216],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "In memory buffer size when reading files for each --transfer."
						},
						"BwLimit": {
							"type": ["null", "boolean", "string", "number"]
						},
						"CaCert": {
							"description": "Client Side CA\nCA certificate used to verify servers",
							"type": "string"
						},
						"CheckSum": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "Skip based on checksum (if available) & size, not mod-time & size"
						},
						"Checkers": {
							"anyOf": [
								{
									"enum": [8],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "Number of checkers to run in parallel."
						},
						"ClientCert": {
							"description": "Client Side Cert\nClient SSL certificate (PEM) for mutual TLS auth",
							"type": "string"
						},
						"ClientKey": {
							"description": "Client Side Key\nClient SSL private key (PEM) for mutual TLS auth",
							"type": "string"
						},
						"CompareDest": {
							"description": "Include additional server-side path during comparison.",
							"type": "string"
						},
						"ConnectTimeout": {
							"anyOf": [
								{
									"enum": [60000000000],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "Connect timeout"
						},
						"Cookie": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "Enable session cookiejar."
						},
						"CopyDest": {
							"description": "Implies --compare-dest but also copies files from path into destination.",
							"type": "string"
						},
						"CutoffMode": {
							"anyOf": [
								{
									"enum": [0],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "Mode to stop transfers when reaching the max transfer limit HARD|SOFT|CAUTIOUS\n0    Hard\n1    Soft\n2    Cautious"
						},
						"DataRateUnit": {
							"type": "string"
						},
						"DeleteMode": {
							"anyOf": [
								{
									"enum": [3],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "the possible delete modes in the config\nDeleteModeOff DeleteMode = iota\n0    DeleteModeBefore\n1    DeleteModeDuring\n2    DeleteModeAfter\n3    DeleteModeOnly"
						},
						"DisableFeatures": {
							"description": "Disable a comma separated list of features.  Use help to see a list.",
							"type": ["null", "boolean", "string", "number"]
						},
						"DownloadHeaders": {
							"anyOf": [
								{
									"type": "null"
								},
								{
									"items": {
										"type": "string"
									},
									"type": "array"
								}
							],
							"description": "Set HTTP header for download transactions"
						},
						"DryRun": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "Do a trial run with no permanent changes"
						},
						"Dump": {
							"anyOf": [
								{
									"enum": [0],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "List of items to dump from: headers,bodies,requests,responses,auth,filters,goroutines,openfiles"
						},
						"ErrorOnNoTransfer": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "Set appropriate exit code if no files transferred\nSets exit code 9 if no files are transferred, useful in scripts"
						},
						"ExpectContinueTimeout": {
							"anyOf": [
								{
									"enum": [1000000000],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "Timeout when using expect / 100-continue in HTTP"
						},
						"Headers": {
							"anyOf": [
								{
									"type": "null"
								},
								{
									"items": {
										"type": "string"
									},
									"type": "array"
								}
							],
							"description": "Set HTTP header for all transactions"
						},
						"IgnoreCaseSync": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "Ignore case when synchronizing"
						},
						"IgnoreChecksum": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "Skip post copy check of checksums."
						},
						"IgnoreErrors": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "delete even if there are I/O errors"
						},
						"IgnoreExisting": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "Skip all files that exist on destination"
						},
						"IgnoreSize": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "Ignore size when skipping use mod-time or checksum"
						},
						"IgnoreTimes": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "Don't skip files that match size and time - transfer all files"
						},
						"Immutable": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "Do not modify files. Fail if existing files have been modified."
						},
						"InsecureSkipVerify": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "Do not verify the server SSL certificate. Insecure."
						},
						"LogLevel": {
							"anyOf": [
								{
									"enum": [7],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "Log level DEBUG|INFO|NOTICE|ERROR\n\n  Log levels.  These are the syslog levels of which we only use a\n  subset.\n\n  0   LOG_EMERG      system is unusable\n  1   LOG_ALERT      action must be taken immediately\n  2   LOG_CRIT       critical conditions\n  3   LOG_ERR        error conditions\n  4   LOG_WARNING    warning conditions\n  5   LOG_NOTICE     normal, but significant, condition\n  6   LOG_INFO       informational message\n  7   LOG_DEBUG      debug-level message"
						},
						"LowLevelRetries": {
							"anyOf": [
								{
									"enum": [10],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "Number of low level retries to do."
						},
						"MaxBacklog": {
							"anyOf": [
								{
									"enum": [10000],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "Maximum number of objects in sync or check backlog."
						},
						"MaxDelete": {
							"anyOf": [
								{
									"enum": [-1],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "When synchronizing, limit the number of deletes"
						},
						"MaxDepth": {
							"anyOf": [
								{
									"enum": [-1],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "If set limits the recursion depth to this."
						},
						"MaxDuration": {
							"anyOf": [
								{
									"enum": [0],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "Maximum duration rclone will transfer data for."
						},
						"MaxStatsGroups": {
							"anyOf": [
								{
									"enum": [1000],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "Maximum number of stats groups to keep in memory. On max oldest is discarded."
						},
						"MaxTransfer": {
							"anyOf": [
								{
									"enum": [-1],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "Maximum size of data to transfer."
						},
						"ModifyWindow": {
							"anyOf": [
								{
									"enum": [1],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "Max time diff to be considered the same"
						},
						"MultiThreadCutoff": {
							"anyOf": [
								{
									"enum": [262144000],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "Use multi-thread downloads for files above this size."
						},
						"MultiThreadSet": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "whether MultiThreadStreams was set (set in fs/config/configflags)"
						},
						"MultiThreadStreams": {
							"anyOf": [
								{
									"enum": [4],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "Max number of streams to use for multi-thread downloads."
						},
						"NoCheckDest": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "Don't check the destination, copy regardless."
						},
						"NoGzip": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "Don't set Accept-Encoding: gzip."
						},
						"NoTraverse": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "Don't traverse destination file system on copy."
						},
						"NoUpdateModTime": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "Don't update destination mod-time if files identical."
						},
						"OrderBy": {
							"description": "Instructions on how to order the transfers, eg 'size,descending'",
							"type": "string"
						},
						"PasswordCommand": {
							"description": "Command for supplying password for encrypted configuration.",
							"type": ["null", "boolean", "string", "number"]
						},
						"Progress": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "Show progress during transfer."
						},
						"SizeOnly": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "Skip based on size only, not mod-time or checksum"
						},
						"StatsFileNameLength": {
							"anyOf": [
								{
									"enum": [45],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "Max file name length in stats. 0 for no limit"
						},
						"StatsLogLevel": {
							"anyOf": [
								{
									"enum": [6],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "Log level to show --stats output DEBUG|INFO|NOTICE|ERROR\n\n  Log levels.  These are the syslog levels of which we only use a\n  subset.\n\n  0   LOG_EMERG      system is unusable\n  1   LOG_ALERT      action must be taken immediately\n  2   LOG_CRIT       critical conditions\n  3   LOG_ERR        error conditions\n  4   LOG_WARNING    warning conditions\n  5   LOG_NOTICE     normal, but significant, condition\n  6   LOG_INFO       informational message\n  7   LOG_DEBUG      debug-level message"
						},
						"StatsOneLine": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "Make the stats fit on one line."
						},
						"StatsOneLineDate": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "If we want a date prefix at all\nEnables --stats-one-line and add current date/time prefix."
						},
						"StatsOneLineDateFormat": {
							"description": "If we want to customize the prefix\nEnables --stats-one-line-date and uses custom formatted date.\nEnclose date string in double quotes (\\\").\nSee https://golang.org/pkg/time/#Time.Format",
							"type": "string"
						},
						"StreamingUploadCutoff": {
							"anyOf": [
								{
									"enum": [102400],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "Cutoff for switching to chunked upload if file size is unknown.\nUpload starts after reaching cutoff or when file ends."
						},
						"Suffix": {
							"description": "Suffix to add to changed files.",
							"type": "string"
						},
						"SuffixKeepExtension": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "Preserve the extension when using --suffix."
						},
						"TPSLimit": {
							"anyOf": [
								{
									"enum": [0],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "Bandwidth limit in kBytes/s, or use suffix b|k|M|G or a full timetable."
						},
						"TPSLimitBurst": {
							"anyOf": [
								{
									"enum": [1],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "Max burst of transactions for --tpslimit."
						},
						"Timeout": {
							"anyOf": [
								{
									"enum": [300000000000],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "IO idle timeout"
						},
						"TrackRenames": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "When synchronizing, track file renames and do a server side move if possible"
						},
						"TrackRenamesStrategy": {
							"description": "Strategies to use when synchronizing using track-renames hash|modtime",
							"enum": ["hash", "modtime"],
							"type": "string"
						},
						"Transfers": {
							"anyOf": [
								{
									"enum": [4],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "Number of file transfers to run in parallel."
						},
						"UpdateOlder": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "Skip files that are newer on the destination."
						},
						"UploadHeaders": {
							"anyOf": [
								{
									"type": "null"
								},
								{
									"items": {
										"type": "string"
									},
									"type": "array"
								}
							],
							"description": "Set HTTP header for upload transactions"
						},
						"UseJSONLog": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "Use json log format."
						},
						"UseListR": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "Use recursive list if available. Uses more memory but fewer transactions."
						},
						"UseMmap": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "Use mmap allocator (see docs)."
						},
						"UseServerModTime": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "Use server modified time instead of object metadata"
						},
						"UserAgent": {
							"description": "Set the user-agent to a specified string. The default is rclone/ version",
							"type": "string"
						}
					},
					"type": "object"
				},
				"rc": {
					"additionalProperties": false,
					"description": "options for the remote control server",
					"properties": {
						"AccessControlAllowOrigin": {
							"description": "Set the allowed origin for CORS.",
							"type": "string"
						},
						"EnableMetrics": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "Enable prometheus metrics on /metrics"
						},
						"Enabled": {
							"anyOf": [
								{
									"enum": [true],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "Enable the remote control server."
						},
						"Files": {
							"description": "Path to local files to serve on the HTTP server.",
							"type": "string"
						},
						"HTTPOptions": {
							"additionalProperties": false,
							"description": "equal to rc-http",
							"properties": {
								"BaseURL": {
									"description": "prefix to strip from URLs\n--baseurl controls the URL prefix that rclone serves from.\nBy default rclone will serve from the root.\nIf you used --baseurl \"/rclone\" then rclone would serve from a URL\nstarting with \"/rclone/\".\nThis is useful if you wish to proxy rclone serve.\nRclone automatically inserts leading and trailing \"/\" on --baseurl,\nso --baseurl \"rclone\", --baseurl \"/rclone\" and --baseurl \"/rclone/\"\nare all treated identically.",
									"type": "string"
								},
								"BasicPass": {
									"description": "password for BasicUser",
									"type": "string"
								},
								"BasicUser": {
									"description": "single username for basic auth if not using Htpasswd",
									"type": "string"
								},
								"ClientCA": {
									"description": "Client certificate authority to verify clients with",
									"type": "string"
								},
								"HtPasswd": {
									"description": "htpasswd file - if not provided no authentication is done\nThis is in standard apache format and supports MD5, SHA1 and BCrypt for basic\nauthentication.  Bcrypt is recommended.\nTo create an htpasswd file:\n\n    touch htpasswd\n    htpasswd -B htpasswd user\n    htpasswd -B htpasswd anotherUser\n\nThe password file can be updated while rclone is running.",
									"type": "string"
								},
								"ListenAddr": {
									"description": "Port to listen on\nUse --addr to specify which IP address and port\nthe server should listen on,\neg --addr 1.2.3.4:8000 or --addr :8080 to listen to all IPs.\nBy default it only listens on localhost.\nYou can use port :0 to let the OS choose an available port.\n\nIf you set --addr to listen on a public or LAN accessible IP address\nthen using Authentication is advised - see the next section for info.",
									"type": "string"
								},
								"MaxHeaderBytes": {
									"anyOf": [
										{
											"enum": [4096],
											"type": "number"
										},
										{
											"type": "number"
										}
									],
									"description": "Maximum size of request header\n--max-header-bytes controls the maximum number of bytes the server will\naccept in the HTTP header."
								},
								"Realm": {
									"description": "realm for authentication",
									"type": "string"
								},
								"ServerReadTimeout": {
									"anyOf": [
										{
											"enum": [3600000000000],
											"type": "number"
										},
										{
											"type": "number"
										}
									],
									"description": "Timeout for server reading data\nNote that this is the total time for a transfer."
								},
								"ServerWriteTimeout": {
									"anyOf": [
										{
											"enum": [3600000000000],
											"type": "number"
										},
										{
											"type": "number"
										}
									],
									"description": "Timeout for server writing data\nNote that this is the total time for a transfer."
								},
								"SslCert": {
									"description": "SSL PEM key (concatenation of certificate and CA certificate)",
									"type": "string"
								},
								"SslKey": {
									"description": "SSL PEM Private key",
									"type": "string"
								},
								"Template": {
									"description": "User specified template\n--template allows a user to specify a custom markup template for http\nand webdav serve functions.  The server exports the following markup\nto be used within the template to server pages:\n\n| Parameter   | Description |\n| :---------- | :---------- |\n| .Name       | The full path of a file/directory. |\n| .Title      | Directory listing of .Name |\n| .Sort       | The current sort used.  This is changeable via ?sort= parameter |\n|             | Sort Options: namedirfist,name,size,time (default namedirfirst) |\n| .Order      | The current ordering used.  This is changeable via ?order= parameter |\n|             | Order Options: asc,desc (default asc) |\n| .Query      | Currently unused. |\n| .Breadcrumb | Allows for creating a relative navigation |\n|-- .Link     | The relative to the root link of the Text. |\n|-- .Text     | The Name of the directory. |\n| .Entries    | Information about a specific file/directory. |\n|-- .URL      | The 'url' of an entry.  |\n|-- .Leaf     | Currently same as 'URL' but intended to be 'just' the name. |\n|-- .IsDir    | Boolean for if an entry is a directory or not. |\n|-- .Size     | Size in Bytes of the entry. |\n|-- .ModTime  | The UTC timestamp of an entry. |",
									"type": "string"
								}
							},
							"type": "object"
						},
						"JobExpireDuration": {
							"anyOf": [
								{
									"enum": [60000000000],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "expire finished async jobs older than this value"
						},
						"JobExpireInterval": {
							"anyOf": [
								{
									"enum": [10000000000],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "interval to check for expired async jobs"
						},
						"NoAuth": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "Don't require auth for certain methods."
						},
						"Serve": {
							"anyOf": [
								{
									"enum": [true],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "Enable the serving of remote objects."
						},
						"WebGUIFetchURL": {
							"description": "URL to fetch the releases for webgui.",
							"type": "string"
						},
						"WebGUIForceUpdate": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "Force update to latest version of web gui"
						},
						"WebGUINoOpenBrowser": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "Don't open the browser automatically"
						},
						"WebGUIUpdate": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "Check and update to latest version of web gui"
						},
						"WebUI": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "Launch WebGUI on localhost"
						}
					},
					"type": "object"
				},
				"rc-http": {
					"additionalProperties": false,
					"description": "same as rc.HTTPOptions",
					"properties": {
						"BaseURL": {
							"description": "prefix to strip from URLs\n--baseurl controls the URL prefix that rclone serves from.\nBy default rclone will serve from the root.\nIf you used --baseurl \"/rclone\" then rclone would serve from a URL\nstarting with \"/rclone/\".\nThis is useful if you wish to proxy rclone serve.\nRclone automatically inserts leading and trailing \"/\" on --baseurl,\nso --baseurl \"rclone\", --baseurl \"/rclone\" and --baseurl \"/rclone/\"\nare all treated identically.",
							"type": "string"
						},
						"BasicPass": {
							"description": "password for BasicUser",
							"type": "string"
						},
						"BasicUser": {
							"description": "single username for basic auth if not using Htpasswd",
							"type": "string"
						},
						"ClientCA": {
							"description": "Client certificate authority to verify clients with",
							"type": "string"
						},
						"HtPasswd": {
							"description": "htpasswd file - if not provided no authentication is done\nThis is in standard apache format and supports MD5, SHA1 and BCrypt for basic\nauthentication.  Bcrypt is recommended.\nTo create an htpasswd file:\n\n    touch htpasswd\n    htpasswd -B htpasswd user\n    htpasswd -B htpasswd anotherUser\n\nThe password file can be updated while rclone is running.",
							"type": "string"
						},
						"ListenAddr": {
							"description": "Port to listen on\nUse --addr to specify which IP address and port\nthe server should listen on,\neg --addr 1.2.3.4:8000 or --addr :8080 to listen to all IPs.\nBy default it only listens on localhost.\nYou can use port :0 to let the OS choose an available port.\n\nIf you set --addr to listen on a public or LAN accessible IP address\nthen using Authentication is advised - see the next section for info.",
							"type": "string"
						},
						"MaxHeaderBytes": {
							"anyOf": [
								{
									"enum": [4096],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "Maximum size of request header\n--max-header-bytes controls the maximum number of bytes the server will\naccept in the HTTP header."
						},
						"Realm": {
							"description": "realm for authentication",
							"type": "string"
						},
						"ServerReadTimeout": {
							"anyOf": [
								{
									"enum": [3600000000000],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "Timeout for server reading data\nNote that this is the total time for a transfer."
						},
						"ServerWriteTimeout": {
							"anyOf": [
								{
									"enum": [3600000000000],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "Timeout for server writing data\nNote that this is the total time for a transfer."
						},
						"SslCert": {
							"description": "SSL PEM key (concatenation of certificate and CA certificate)",
							"type": "string"
						},
						"SslKey": {
							"description": "SSL PEM Private key",
							"type": "string"
						},
						"Template": {
							"description": "User specified template\n--template allows a user to specify a custom markup template for http\nand webdav serve functions.  The server exports the following markup\nto be used within the template to server pages:\n\n| Parameter   | Description |\n| :---------- | :---------- |\n| .Name       | The full path of a file/directory. |\n| .Title      | Directory listing of .Name |\n| .Sort       | The current sort used.  This is changeable via ?sort= parameter |\n|             | Sort Options: namedirfist,name,size,time (default namedirfirst) |\n| .Order      | The current ordering used.  This is changeable via ?order= parameter |\n|             | Order Options: asc,desc (default asc) |\n| .Query      | Currently unused. |\n| .Breadcrumb | Allows for creating a relative navigation |\n|-- .Link     | The relative to the root link of the Text. |\n|-- .Text     | The Name of the directory. |\n| .Entries    | Information about a specific file/directory. |\n|-- .URL      | The 'url' of an entry.  |\n|-- .Leaf     | Currently same as 'URL' but intended to be 'just' the name. |\n|-- .IsDir    | Boolean for if an entry is a directory or not. |\n|-- .Size     | Size in Bytes of the entry. |\n|-- .ModTime  | The UTC timestamp of an entry. |",
							"type": "string"
						}
					},
					"type": "object"
				},
				"sftp": {
					"additionalProperties": false,
					"description": "options for the Sftp Server",
					"properties": {
						"AuthorizedKeys": {
							"description": "Path to authorized keys file",
							"type": "string"
						},
						"HostKeys": {
							"anyOf": [
								{
									"type": "null"
								},
								{
									"items": {
										"type": "string"
									},
									"type": "array"
								}
							],
							"description": "Paths to private host keys\nSSH private host key file (Can be multi-valued, leave blank to auto generate)"
						},
						"ListenAddr": {
							"description": "Port to listen on\nIPaddress:Port or :Port to bind server to.",
							"type": "string"
						},
						"NoAuth": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "Allow connections with no authentication if set."
						},
						"Pass": {
							"description": "password for user\nPassword for authentication.",
							"type": "string"
						},
						"User": {
							"description": "single username\nUser name for authentication.",
							"type": "string"
						}
					},
					"type": "object"
				},
				"vfs": {
					"additionalProperties": false,
					"description": "options for creating the vfs",
					"properties": {
						"CacheMaxAge": {
							"anyOf": [
								{
									"enum": [3600000000000],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "Max age of objects in the cache."
						},
						"CacheMaxSize": {
							"anyOf": [
								{
									"enum": [-1],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "Max total size of objects in the cache."
						},
						"CacheMode": {
							"anyOf": [
								{
									"enum": [0],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "Cache mode off|minimal|writes|full\n0       \"off\"  cache nothing - return errors for writes which can't be satisfied\n1   \"minimal\"  cache only the minimum, eg read/write opens\n2     \"writes\" cache all files opened with write intent\n3       \"full\" cache all files opened in any mode"
						},
						"CachePollInterval": {
							"anyOf": [
								{
									"enum": [60000000000],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "Interval to poll the cache for stale objects."
						},
						"CaseInsensitive": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "If a file name not found, find a case insensitive match."
						},
						"ChunkSize": {
							"anyOf": [
								{
									"enum": [134217728],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "if > 0 read files in chunks\nRead the source objects in chunks."
						},
						"ChunkSizeLimit": {
							"anyOf": [
								{
									"enum": [-1],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "if > ChunkSize double the chunk size after each chunk until reached\nIf greater than --vfs-read-chunk-size,\ndouble the chunk size after each chunk read,\nuntil the limit is reached.\n'off' is unlimited."
						},
						"DirCacheTime": {
							"anyOf": [
								{
									"enum": [300000000000],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "how long to consider directory listing cache valid\nTime to cache directory entries for."
						},
						"DirPerms": {
							"anyOf": [
								{
									"enum": [511],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "Directory permissions"
						},
						"FilePerms": {
							"anyOf": [
								{
									"enum": [438],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "File permissions"
						},
						"GID": {
							"anyOf": [
								{
									"enum": [1000],
									"type": "number"
								},
								{
									"type": "number"
								}
							]
						},
						"NoChecksum": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "don't check checksums if set\nDon't compare checksums on up/download."
						},
						"NoModTime": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "Don't read/write the modification time (can speed things up)."
						},
						"NoSeek": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "don't allow seeking if set\nDon't allow seeking in files."
						},
						"PollInterval": {
							"anyOf": [
								{
									"enum": [60000000000],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "Time to wait between polling for changes.\nMust be smaller than dir-cache-time.\nOnly on supported remotes.\nSet to 0 to disable."
						},
						"ReadOnly": {
							"anyOf": [
								{
									"enum": [false],
									"type": "boolean"
								},
								{
									"type": "boolean"
								}
							],
							"description": "if set VFS is read only\nMount read-only."
						},
						"ReadWait": {
							"anyOf": [
								{
									"enum": [5000000],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "Time to wait for in-sequence read before seeking."
						},
						"UID": {
							"anyOf": [
								{
									"enum": [1000],
									"type": "number"
								},
								{
									"type": "number"
								}
							]
						},
						"Umask": {
							"anyOf": [
								{
									"enum": [18],
									"type": "number"
								},
								{
									"type": "number"
								}
							]
						},
						"WriteWait": {
							"anyOf": [
								{
									"enum": [1000000000],
									"type": "number"
								},
								{
									"type": "number"
								}
							],
							"description": "Time to wait for in-sequence write before giving error."
						}
					},
					"type": "object"
				}
			},
			"type": "object"
		}
	}
}
